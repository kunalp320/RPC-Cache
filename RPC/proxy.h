/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef proxy_H
#define proxy_H

#include <thrift/TDispatchProcessor.h>
#include "proxy_server_types.h"

namespace Proxy {

class proxyIf {
 public:
  virtual ~proxyIf() {}
  virtual void getPage(std::string& _return, const std::string& URL) = 0;
};

class proxyIfFactory {
 public:
  typedef proxyIf Handler;

  virtual ~proxyIfFactory() {}

  virtual proxyIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(proxyIf* /* handler */) = 0;
};

class proxyIfSingletonFactory : virtual public proxyIfFactory {
 public:
  proxyIfSingletonFactory(const boost::shared_ptr<proxyIf>& iface) : iface_(iface) {}
  virtual ~proxyIfSingletonFactory() {}

  virtual proxyIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(proxyIf* /* handler */) {}

 protected:
  boost::shared_ptr<proxyIf> iface_;
};

class proxyNull : virtual public proxyIf {
 public:
  virtual ~proxyNull() {}
  void getPage(std::string& /* _return */, const std::string& /* URL */) {
    return;
  }
};

typedef struct _proxy_getPage_args__isset {
  _proxy_getPage_args__isset() : URL(false) {}
  bool URL;
} _proxy_getPage_args__isset;

class proxy_getPage_args {
 public:

  proxy_getPage_args() : URL() {
  }

  virtual ~proxy_getPage_args() throw() {}

  std::string URL;

  _proxy_getPage_args__isset __isset;

  void __set_URL(const std::string& val) {
    URL = val;
  }

  bool operator == (const proxy_getPage_args & rhs) const
  {
    if (!(URL == rhs.URL))
      return false;
    return true;
  }
  bool operator != (const proxy_getPage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const proxy_getPage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class proxy_getPage_pargs {
 public:


  virtual ~proxy_getPage_pargs() throw() {}

  const std::string* URL;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _proxy_getPage_result__isset {
  _proxy_getPage_result__isset() : success(false) {}
  bool success;
} _proxy_getPage_result__isset;

class proxy_getPage_result {
 public:

  proxy_getPage_result() : success() {
  }

  virtual ~proxy_getPage_result() throw() {}

  std::string success;

  _proxy_getPage_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const proxy_getPage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const proxy_getPage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const proxy_getPage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _proxy_getPage_presult__isset {
  _proxy_getPage_presult__isset() : success(false) {}
  bool success;
} _proxy_getPage_presult__isset;

class proxy_getPage_presult {
 public:


  virtual ~proxy_getPage_presult() throw() {}

  std::string* success;

  _proxy_getPage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class proxyClient : virtual public proxyIf {
 public:
  proxyClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  proxyClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getPage(std::string& _return, const std::string& URL);
  void send_getPage(const std::string& URL);
  void recv_getPage(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class proxyProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<proxyIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (proxyProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getPage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  proxyProcessor(boost::shared_ptr<proxyIf> iface) :
    iface_(iface) {
    processMap_["getPage"] = &proxyProcessor::process_getPage;
  }

  virtual ~proxyProcessor() {}
};

class proxyProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  proxyProcessorFactory(const ::boost::shared_ptr< proxyIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< proxyIfFactory > handlerFactory_;
};

class proxyMultiface : virtual public proxyIf {
 public:
  proxyMultiface(std::vector<boost::shared_ptr<proxyIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~proxyMultiface() {}
 protected:
  std::vector<boost::shared_ptr<proxyIf> > ifaces_;
  proxyMultiface() {}
  void add(boost::shared_ptr<proxyIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getPage(std::string& _return, const std::string& URL) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPage(_return, URL);
    }
    ifaces_[i]->getPage(_return, URL);
    return;
  }

};

} // namespace

#endif
