// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "proxy.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

#include <curl/curl.h>

#include <iostream>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace ::Proxy;

struct wd_in
{
	size_t size;
	size_t len;
	char *data;
};

/* This function is registered as a callback with CURL.  As the data
 from the requested webpage is returned in chunks, write_data is
 called with each chunk.  */
static size_t write_data(void *buffer, size_t size, size_t nmemb, void *userp)
{
	struct wd_in *wdi = (struct wd_in *)userp;

	while (wdi->len + (size * nmemb) >= wdi->size)
	{
		/* check for realloc failing in real code. */
		wdi->data = (char*)realloc(wdi->data, wdi->size * 2);
		wdi->size *= 2;
	}

	memcpy(wdi->data + wdi->len, buffer, size * nmemb);
	wdi->len += size * nmemb;

	return size * nmemb;
}

class proxyHandler: virtual public proxyIf
{
public:
	proxyHandler()
	{
		// Your initialization goes here
	}

	void getPage(std::string& _return, const std::string& URL)
	{
		std::cout << "URL: " << URL << std::endl;

		{
			CURL *curl;
			CURLcode res;
			struct wd_in wdi;

			memset(&wdi, 0, sizeof(wdi));

			/* Get a curl handle.  Each thread will need a unique handle. */
			curl = curl_easy_init();

			//std::cout << "TEST " << std::endl;

			if (NULL != curl)
			{
				//std::cout << "TEST2" << std::endl;

				wdi.size = 1024;
				/* Check for malloc failure in real code. */
				wdi.data = (char*)malloc(wdi.size);

				/* Set the URL for the operation. */
				curl_easy_setopt(curl, CURLOPT_URL, URL.c_str());

				/* "write_data" function to call with returned data. */
				curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_data);

				/* userp parameter passed to write_data. */
				curl_easy_setopt(curl, CURLOPT_WRITEDATA, &wdi);

				//std::cout << "TEST3" << std::endl;

				/* Actually perform the query. */
				res = curl_easy_perform(curl);

				//TODO checks

				//std::cout << "TEST4" << std::endl;

				/* Check the return value and do whatever. */

				/* Clean up after ourselves. */
				curl_easy_cleanup(curl);
			}
			else
			{
				fprintf(stderr, "Error: could not get CURL handle.\n");
				exit(EXIT_FAILURE);
			}

			/* Now wdi.data has the data from the GET and wdi.len is the length
			 of the data available, so do whatever. */

			/* Write the content to stdout. */
			//write(STDOUT_FILENO, wdi.data, wdi.len);

			_return = std::string(wdi.data, wdi.len);

			/* cleanup wdi.data buffer. */
			free(wdi.data);
		}
		std::cout << "TEST" << std::endl;
		//_return = URL;
	}

};

int main(int argc, char **argv)
{
	int port = 9090;
	shared_ptr<proxyHandler> handler(new proxyHandler());
	shared_ptr<TProcessor> processor(new proxyProcessor(handler));
	shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
	shared_ptr<TTransportFactory> transportFactory(
			new TBufferedTransportFactory());
	shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

	TSimpleServer server(processor, serverTransport, transportFactory,
			protocolFactory);
	server.serve();
	return 0;
}

